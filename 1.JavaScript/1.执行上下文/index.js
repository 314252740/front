/**
 * ?什么是执行上下文
 * * 执行上下文是评估和执行JavaScript代码的环境的抽象概念，每当JavaScript代码运行时候，他都是在执行上下文中运行
 * !类型
 * !全局执行上下文
 * *这是默认或者说基础的上下文，任何不在函数内部的代码都在全局上下文中。它会执行两件事：创建一个全局的 window 对象（浏览器的情况下），
 * *并且设置 this 的值等于这个全局对象。一个程序中只会有一个全局执行上下文
 * !函数执行上下文
 * *当一个函数被调用时, 都会为该函数创建一个新的上下文。每个函数都有它自己的执行上下文，不过是在函数被调用时创建的。函数上下文可以有任意多个。
 * *每当一个新的执行上下文被创建，它会按定义的顺序（将在后文讨论）执行一系列步骤。
 * !eval函数执行上下文
 * *执行在 eval 函数内部的代码也会有它属于自己的执行上下文
 * 
 * ?如何创建执行上下文
 * *变量对象(Variable object，VO)
 * *作用域链(Scope chain)
 * *this
 * 
 * *1.函数创建，保存作用域链到[[scope]]
 * *2.创建函数执行上下文，函数执行上下文压入调用栈（LIFO）
 * *3.函数并不立刻执行，开始做准备工作，第一步：复制函数[[scope]]属性创建作用域链
 * *4. 用 arguments 创建活动对象，随后初始化活动对象，加入形参、函数声明、变量声明
 * *5. 将活动对象压入函数作用域链顶端
 * *6. 准备工作做完，开始执行函数，随着函数的执行，修改 AO 的属性值
 * *7. 查找变量的值，返回后函数执行完毕，函数上下文从执行上下文栈中弹出
 */
