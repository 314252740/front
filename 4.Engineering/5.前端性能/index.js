/**
 * ? 为什么监控
 * * 1. 关注性能是工程师的本性 + 本分；
 * * 2. 页面性能对用户体验而言十分关键。每次重构对页面性能的提升，仅靠工程师开发设备的测试数据是没有说服力的，需要有大量的真实数据用于验证
 * * 3. 资源挂了、加载出现异常，不能总靠用户投诉才后知后觉，需要主动报警
 * 
 * ? 用什么监控
 * * W3C 定义了强大的 Performance API，其中又包括了 High Resolution Time 、 Frame Timing 、 Navigation Timing 、 Performance Timeline 、Resource Timing 、 User Timing 等诸多具体标准
 * 
 * ?前端监控：
 * * 1. 数据监控、
 *  ^顾名思义就是监听用户的行为
 *  * 1.1  PV/UV:PV(page view)，即页面浏览量或点击量。UV:指访问某个站点或点击某条新闻的不同IP地址的人数
 *  * 1.2  用户在每一个页面的停留时间
 *  * 1.3  用户通过什么入口来访问该网页
 *  * 1.4  用户在相应的页面中触发的行为
 *  todo 统计这些数据是有意义的，比如我们知道了用户来源的渠道，可以促进产品的推广，知道用户在每一个页面停留的时间，可以针对停留较长的页面，增加广告推送等等
 * 
 * * 2. 性能监控
 *    ^ 性能监控指的是监听前端的性能，主要包括监听网页或者说产品在用户端的体验
 *  * 2.1  不同用户，不同机型和不同系统下的首屏加载时间
 *  * 2.2  白屏时间
 *  * 2.3  http等请求的响应时间
 *  * 2.4  静态资源整体下载时间
 *  * 2.5  页面渲染时间
 *  * 2.6  页面交互动画完成时间
 * todo 可以展示前端性能的好坏，根据性能监测的结果可以进一步的去优化前端性能，比如兼容低版本浏览器的动画效果，加快首屏加载等等
 * 
 * * 3. 异常监控
 *    ^ 产品的前端代码在执行过程中也会发生异常，因此需要引入异常监控。及时的上报异常情况，可以避免线上故障的发上。虽然大部分异常可以通过try catch的方式捕获，但是比如内存泄漏以及其他偶现的异常难以捕获
 *  * 3.1  Javascript的异常监控
 *  * 3.2  样式丢失的异常监控
 * 
 * ?常用前端埋点方案总结
 * * 1. 代码埋点
 *    ^ 代码埋点，就是以嵌入代码的形式进行埋点，比如需要监控用户的点击事件，会选择在用户点击时，插入一段代码，保存这个监听行为或者直接将监听行为以某一种数据格式直接传递给server端。此外比如需要统计产品的PV和UV的时候，需要在网页的初始化时，发送用户的访问信息等。
 *  !优点： 可以在任意时刻，精确的发送或保存所需要的数据信息
 *  !缺点： 工作量较大，每一个组件的埋点都需要添加相应的代码
 * 
 * * 2. 可视化埋点
 *    ^通过可视化交互的手段，代替代码埋点。将业务代码和埋点代码分离，提供一个可视化交互的页面，输入为业务代码，通过这个可视化系统，可以在业务代码中自定义的增加埋点事件等等，最后输出的代码耦合了业务代码和埋点代码。
 *    ^可视化埋点听起来比较高大上，实际上跟代码埋点还是区别不大。也就是用一个系统来实现手动插入代码埋点的过程
 *  !缺点： 可视化埋点可以埋点的控件有限，不能手动定制
 * 
 * * 3. 无痕埋点
 *    ^无埋点并不是说不需要埋点，而是全部埋点，前端的任意一个事件都被绑定一个标识，所有的事件都别记录下来。通过定期上传记录文件，配合文件解析，解析出来我们想要的数据，并生成可视化报告供专业人员分析因此实现“无埋点”统计
 *  !优点： 由于采集的是全量数据，所以产品迭代过程中是不需要关注埋点逻辑的，也不会出现漏埋、误埋等现象
 *  !缺点： 无埋点采集全量数据，给数据传输和服务器增加压力
 *  !缺点： 无法灵活的定制各个事件所需要上传的数据
 * 
 * ?前端埋点方案选型和前端上报方案设计
 * * 1. 监控数据
 *  ^ 普遍需要监控和上报的数据。监控的分为三个阶段：用户进入网页首页、用户在网页内部交互和交互中报错。每一个阶段需要监控和上报的数据如下图所示
 * 
 * * 2. 埋点方案
 *  ^ 在实际项目中考虑到上报数据的灵活定制，以及减少数据传输和服务器的压力，在所需埋点处不多的情况下，常用的方式是代码埋点。
 *  ^以用户进入首页为例，我们在首页渲染完成后会发送事件类型和类型相关的数据给server端，告知首页的监控信息
 *
 * * 3. 上报周期和上报数据类型 
 *  ^ 如果埋点的事件不是很多，上报可以时时进行，比如监控用户的交互事件，可以在用户触发事件后，立刻上报用户所触发的事件类型。如果埋点的事件较多，或者说网页内部交互频繁，可以通过本地存储的方式先缓存上报信息，然后定期上报
 * 
    * *3.1 上报数据
    * * 3.1.1 who: appid(系统或者应用的id),userAgent(用户的系统、网络等信息)
    * * 3.1.2 when: timestamp(上报的时间戳)
    * * 3.1.3 from where: currentUrl(用户当前url)，fromUrl(从哪一个页面跳转到当前页面)，type(上报的事件类型),element(触发上报事件的元素）
    * * 3.1.4 what: 上报的自定义扩展数据data:{},扩展数据中可以按需求定制，比如包含uid等信息
    *
 * ? 前端监控结果可视化展示系统的设计
 *  ^当后端得到前端上报的信息之后，经过数据分析和处理，需要前端可视化的展示数据分析后的结果。
 *  ^可以在开源中后台系统ant-design-pro的基础上进行二次开发，首先要明确展示信息。展示的信息包括单个用户和整体应用。
 *  * 1. 对于单个用户来说需要展示的监控信息为：
    *  * 1.1 单个用户，在交互过程中触发各个埋点事件的次数
    *  * 1.2 单个用户，在某个时间周期内，访问本网页的入口来源
    *  * 1.3 单个用户，在每一个子页面的停留时间
    * 
 *  * 2. 对于全体用户需要展示的信息为：
    *  * 2.1 某一个时间段内网页的PV和UV
    *  * 2.2 全体用户访问网页的设备和操作系统分析
    *  * 2.3 某一个时间段内访问本网页的入口来源分析
    *  * 2.4 全体用户在访问本网页时，在交互过程中触发各个埋点事件的总次数
    *  * 2.5 全体用户在访问本网页时，网页上报异常的集合
    * 
 *  * 3. 删选功能集合：
    *  * 3.1 时间筛选：提供今日（00点到当前时间）、本周、本月和全年
    *  * 3.2 用户删选：提供根据用户id删选出用户行为的
    *  * 3.3 设备删选：删选不同系统的整体展示信息
 * 
*/